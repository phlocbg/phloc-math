/**
 * Copyright (C) 2006-2014 phloc systems
 * http://www.phloc.com
 * office[at]phloc[dot]com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.phloc.math.graph.impl;

import javax.annotation.Nonnull;
import javax.annotation.Nullable;
import javax.annotation.concurrent.NotThreadSafe;

import com.phloc.commons.annotations.Nonempty;
import com.phloc.commons.collections.attrs.MapBasedAttributeContainer;
import com.phloc.commons.hash.HashCodeGenerator;
import com.phloc.commons.string.StringHelper;
import com.phloc.commons.string.ToStringGenerator;
import com.phloc.math.graph.IBaseGraphObject;

/**
 * Base class for graph nodes and graph relations.
 * 
 * @author Philip Helger
 */
@NotThreadSafe
public abstract class AbstractBaseGraphObject extends MapBasedAttributeContainer implements IBaseGraphObject
{
  private final String m_sID;

  /**
   * Constructor
   * 
   * @param sID
   *        If <code>null</code> a new ID is generated by the
   *        {@link GraphObjectIDFactory}.
   */
  public AbstractBaseGraphObject (@Nullable final String sID)
  {
    if (StringHelper.hasNoText (sID))
      m_sID = GraphObjectIDFactory.createNewGraphObjectID ();
    else
      m_sID = sID;
  }

  @Nonnull
  @Nonempty
  public final String getID ()
  {
    return m_sID;
  }

  @Override
  public boolean equals (final Object o)
  {
    if (o == this)
      return true;
    if (!super.equals (o))
      return false;
    final AbstractBaseGraphObject rhs = (AbstractBaseGraphObject) o;
    return m_sID.equals (rhs.m_sID);
  }

  @Override
  public int hashCode ()
  {
    return HashCodeGenerator.getDerived (super.hashCode ()).append (m_sID).getHashCode ();
  }

  @Override
  public String toString ()
  {
    return ToStringGenerator.getDerived (super.toString ()).append ("id", m_sID).toString ();
  }
}
